module fsm(input logic clk, res, sa, sb, output logic [2:0]la, [2:0]lb);
    typedef enum logic [2:0] {s0, s1, s2, s3, s4, s5, s6, s7} statetype;
    statetype [1:0] state, nextstate;
    parameter red = 3'b111;
    parameter yellow = 3'b001;
    parameter green = 3'b011;
    logic outClk;
    clockDivider divider(clk, res, outClk);
    
    always_ff@(posedge outClk, posedge res)
        if(res) state <= s0;
        else state <= nextstate;
        
    always_comb
        case(state)
            s0:      if(sb) nextstate <= s1;
                       else nextstate <= s0;
            s1:      nextstate <= s2;
            s2:      nextstate <= s3;
            s3:      nextstate <= s4;
            s4:      if(sa) nextstate <= s5;
                       else nextstate <= s4;
            s5:      nextstate <= s6;
            s6:      nextstate <= s7;
            s7:      nextstate <= s0;
            default: nextstate <= s0;
         endcase
    
    always_comb
        case(state)
            s0:      {la, lb} = {green, red};
            s1:      {la, lb} = {yellow, red};
            s2:      {la, lb} = {red, red};
            s3:      {la, lb} = {red, yellow};
            s4:      {la, lb} = {red, green};
            s5:      {la, lb} = {red, yellow};
            s6:      {la, lb} = {red, red};
            s7:      {la, lb} = {yellow, red};
            default: {la, lb} = {green, red};
        endcase
endmodule

module clockDivider(input logic inClk, res, output logic outClk);
    logic [27:0] counter = {28{1'b0}};
    always @(posedge inClk)
        begin
            if(res) counter <= 0;
            else counter <= counter + 1;
        end
        logic last = counter[27];
        BUFG BUFG_inst (.I(last),.O(outClk));
endmodule

module fsm_tb();
    logic clk, res, sa, sb;
    logic [2:0] la; 
    logic [2:0] lb;
    fsm test(clk, res, sa, sb, la, lb);
    always
        begin
            clk = 0; #5; clk = 1; #5;
        end
        
    initial
        begin
            res = 0; sa = 0; sb = 0;#10;
            sb = 1; #10;
            sa = 1; sb = 0; #10;
            sb = 1; #10;
        end

endmodule